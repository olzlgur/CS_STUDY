### AOP란?
Aspect-Oriented Programming이라는 의미로 관점을 기준으로 기능을 분리하는 관점지향 프로그래밍을 의미한다. 
핵심적인 관점과 부가적인 관점을 나누어 관점을 기준으로 모듈화를 한다. 

핵심적인 관점은 일반적으로 해당 객체가 가져야할 본래의 기능으로 핵심 비즈니스 로직을 의미하고 부가적인 관점은 핵심 로직을 실행하는 과정에서 수행되는 로깅, 트랜잭션, 시간 측정 등이 있다.

AOP는 코드에서 반복적으로 작성되는 코드를 모듈화하여 비즈니스 로직에서 분리하는 것을 목표로 하는데 이 반복적인 코드를 흩어진 관심사(Crosscutting Concern)이라 한다.

#### AOP의 주요 개념
- Aspect: 흩어진 관심사를 모듈화한 것, 주로 부가기능이 모듈화됨
- Target: Aspect를 적용하는 곳, 주로 비즈니스 로직을 담당하는 곳이다. ex) 클래스, 메서드
- Advice: 어떤 동작을 수행해야할 지에 대한 것, 부가기능을 담은 구현체
- JointPoint: Advice가 적용될 위치를 의미한다. ex) 메서드 진입, 생성자 호출 등등
- PointCut: JointPoint의 상세한 스펙을 정의한 것

#### 스프링 AOP의 특징
- 프록시 패턴 기반의 AOP구현체
- 프록시는 메서드 오버라이딩 개념으로 동작하기 때문에 메서드에만 적용 가능 -> 스프링 빈에만 적용 가능







### 참고자료
```
https://velog.io/@kai6666/Spring-Spring-AOP-개념
https://engkimbs.tistory.com/entry/스프링AOP
```
